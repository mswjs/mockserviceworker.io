---
import BaseLayout from "./BaseLayout.astro";
import { type CollectionEntry } from "astro:content";
import { Grid } from '@mswjs/shared/components/react/grid'
import { Container } from "@mswjs/shared/components/react/container";
import FormattedDate from '@mswjs/shared/components/FormattedDate.astro';
import DocsNavTree from '@mswjs/shared/components/docs/DocsNavTree.astro'
import TableOfContents from '@mswjs/shared/components/docs/DocsTableOfContents.astro'
import DocsSidebarPartners from "@mswjs/shared/components/docs/DocsSidebarPartners.astro";
import { type DocsItem, type DocsFrontmatter, createNavTreeBuilder } from '@mswjs/shared/utils/buildNavTree'
import Ads from '@mswjs/shared/components/Ads.astro'

import type { MarkdownHeading } from 'astro';
import { buildHeadings } from '@mswjs/shared/utils/buildHeadings';
import { DocsSidebarLinks } from "@mswjs/shared/components/react/docsSidebarLinks";
import { FeedbackWidget } from "@mswjs/shared/components/react/feedbackWidget";
import { DocsMovileNav } from "@mswjs/shared/components/react/docsMobileNav";
import PageBanner from "@mswjs/shared/components/PageBanner.astro";

type Props = CollectionEntry<'docs'>['data'] & {
  lastModifiedAt: Date
  editUrl: URL
  headings: Array<MarkdownHeading>
  displayV1DocsBanner?: boolean
}

const allPages = await Astro.glob<DocsFrontmatter>('../content/docs/**/*.mdx')
const builder = createNavTreeBuilder(allPages)

const navTree: Array<DocsItem> = [
  ...builder.get('*.mdx'),
  {
    kind: 'group',
    title: 'Basics',
    children: builder.get('basics/**/*.mdx')
  },
  {
    kind: 'group',
    title: 'Concepts',
    children: builder.get('concepts/**/*.mdx')
  },
  {
    kind: 'group',
    title: 'Network behavior',
    children: builder.get('network-behavior/**/*.mdx')
  },
  {
    kind: 'group',
    title: 'Integrations',
    children: builder.get('integrations/**/*.mdx')
  },
  {
    kind: 'group',
    title: 'API',
    children: builder.get('api/**/*.mdx')
  },
  {
    kind: 'group',
    title: 'CLI',
    children: builder.get('cli/**/*.mdx')
  },
  {
    kind: 'group',
    title: "Best practices",
    children: builder.get('best-practices/**/*.mdx')
  },
  {
    kind: 'group',
    title: 'Recipes',
    children: builder.get('recipes/**/*.mdx')
  }
]

const { props: page } = Astro

const nestedHeadings = buildHeadings(page.headings || [], {
  maxDepth: page.tableOfContents?.maxDepth
})
const lastModifiedAt = new Date(page.lastModifiedAt)
const shouldDisplayAds = import.meta.env.ADS
---

<BaseLayout compact={true}>
  <Fragment slot="banner">
    {page.displayV1DocsBanner ? (
      <PageBanner>
        <p>You are viewing the docs for <strong>MSW 2.0</strong>. To access the 1.x docs <a href="https://v1.mswjs.io/" class="text-primary hover:underline" target="_blank" rel="noopener noreferrer">click here</a>.</p>
      </PageBanner>
    ) : null}
  </Fragment>

  <main>
    <Container compact={true}>
      <!-- Mobile: Nav tree -->
      <DocsMovileNav client:only="react">
        <nav>
          <DocsNavTree items={navTree} />
        </nav>
      </DocsMovileNav>

      <article>
        <Grid className="relative">
          <!-- Nav tree -->
          <section class="hidden xl:block xl:w-1/5 xl:col-span-3 xl:fixed xl:top-[60px]">
            <nav id="docs-nav-tree" class="py-10 pr-10 overflow-y-auto h-[calc(100vh_-_60px)]">
              <DocsNavTree items={navTree} />
            </nav>
          </section>

          <!-- Content -->
          <div class="py-10 mdx sm:col-span-9 xl:col-start-4 xl:col-span-7">
            <header class="mb-8">
              <h1 class="mb-3">{page.title}</h1>
              {page.description ? (
                <p class="mb-6 text-lg font-medium text-neutral-400">{page.description}</p>
              ) : null}
              {shouldDisplayAds ? (
                <Ads publisher="mswjsio" />
              ) : null}
            </header>
            <div class="prose max-w-none">
              <slot />
            </div>
            <footer class="justify-between pt-5 mt-10 text-sm font-medium border-t text-neutral-400 border-neutral-800 md:flex">
              <p>
                {lastModifiedAt ? (
                  <span>
                    Last updated on{' '}
                      <FormattedDate date={lastModifiedAt} />
                  </span>
                ) : null}
              </p>
              <a
                href={page.editUrl}
                target="_blank"
                rel="noopener noreferrer"
                class="text-white hover:underline"
              >
                Edit this page on GitHub
              </a>
            </footer>
            <FeedbackWidget client:only="react" pageTitle={page.title} />
          </div>

          <!-- Table of contents -->
          <aside class="hidden py-10 pl-5 text-sm font-medium text-neutral-400 lg:block sm:col-span-3 xl:col-span-2">
            <div class="sticky top-28">
              <div class="flex flex-col gap-8 h-[calc(100vh_-_2.5rem_-_60px)] pb-12 overflow-x-hidden">
                {nestedHeadings.length > 0 ? (
                  <section class="min-h-0 overflow-y-auto">
                    <h4 class="mb-2 text-xs font-bold tracking-widest text-white uppercase">
                      Contents
                    </h4>
                    <TableOfContents headings={nestedHeadings}  />
                  </section>
                ) : null}

                  <DocsSidebarLinks gitHubUrl="https://github.com/mswjs/msw" blogUrl="/blog" />

                  <div>
                    <h4 class="mb-2 text-xs font-bold tracking-widest text-white uppercase">
                      Partners
                    </h4>
                    <DocsSidebarPartners />
                  </div>
              </div>
            </div>
          </aside>
        </Grid>
      </article>
    </Container>
  </main>
</BaseLayout>

<script is:inline>
{
  const NAV_TREE_SCROLL_KEY = 'nav-tree-scroll'

  const docsNavTree = document.getElementById('docs-nav-tree');
  const storedScrollValue = sessionStorage.getItem(NAV_TREE_SCROLL_KEY);
  const storedScrollPosition = storedScrollValue ? parseInt(storedScrollValue, 10) : undefined
  const activeDocsLink = document.getElementsByClassName('docs-link-active')[0]

  const scrollToActiveLink = () => {
    // If there's no stored scroll position, scroll to the
    // currently active link in the nav tree.
    activeDocsLink.scrollIntoView({
      block: 'center',
      behavior: 'instant'
    })
  }

  if (storedScrollPosition == null) {
    scrollToActiveLink()
  } else {
    docsNavTree.scrollTop = storedScrollPosition

    if (activeDocsLink) {
      const observer = new IntersectionObserver(([entry]) => {
        if (!entry.isIntersecting) {
          scrollToActiveLink()
        }

        observer.disconnect()
      }, { root: null, threshold: 0.1 })

      observer.observe(activeDocsLink)
    }
  }

  window.addEventListener('beforeunload', () => {
    sessionStorage.setItem(NAV_TREE_SCROLL_KEY, docsNavTree.scrollTop);
  });
}
</script>